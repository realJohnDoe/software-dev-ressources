{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Software Development Ressources","n":0.577},"1":{"v":"\n## Welcome to my Notes on Software Development\n\nI am collecting some notes and ressources on different software development topics, sometimes with a summary.\n\nIf you have feedback, [let me know](https://github.com/realJohnDoe/software-dev-ressources/issues/new/choose)!ðŸ™‚\n","n":0.186}}},{"i":2,"$":{"0":{"v":"Paradigms","n":1}}},{"i":3,"$":{"0":{"v":"Functional Programming","n":0.707},"1":{"v":"\n\n- [Bartosz Milewski: Category Theory for Programmers][milewski-book]\n- [Functional programming design patterns by Scott Wlaschin][functional-design-patterns]\n- [OOP - Does functional programming replace GoF design patterns?][gof-design-patterns])\n\n[milewski-book]: https://github.com/hmemcpy/milewski-ctfp-pdf/\n[functional-design-patterns]: https://vimeo.com/113588389\n[gof-design-patterns]: https://stackoverflow.com/questions/327955/does-functional-programming-replace-gof-design-patterns\n","n":0.196}}},{"i":4,"$":{"0":{"v":"Languages","n":1}}},{"i":5,"$":{"0":{"v":"Rust","n":1},"1":{"v":"\n\n- `to_owned`: goes from borrowed to owned, usually by implementing the clone\n  trait.\n\n- The difference between arrays and slices is that arrays have a fixed size\n  and are denoted with `[T, n]` or `&[T, n]` while slices have a variable\n  size and are denoted with `[T]` or `&[T]`.\n\n- Slices\n\n  - have a `.windows(n)` method that returns all possible windows of length\n    `n` for that slice.\n\n  - have a `.any(predicate) bool` method that returns true if any of the\n    contained ites evaluates true under the predicate.\n\n  - have a `.len()` and a `.is_empty()` method.\n\n- Lambdas can be defined with a `|x, y| x*y` syntax.\n\n- `match` can receive mutliple values, like\n\n  ```rust\n  match (a, b) {\n       true, false => {},\n       ...\n  }`\n  ```\n\n- We can use `||` syntax to return a first simple expression and forward to a\n  more complex expression in case the first one is false.\n\n- The crate `int_enum` can be used to build integer-valued enums with the syntax\n\n  ```rust\n  #[repr(usize)]\n  #[derive(Clone, Copy, Debug, PartialEq, Eq, IntEnum)]\n  enum Colors {\n    Red = 1,\n    Blue = 2\n  }\n\n  let red = Color::from_int(1).expect(\"value out of range\");\n  let int_value = red.int_value();\n\n  ```\n\n- The crate `enum_iterator` can be used to iterate over enums.\n\n- `?` can be used to unwrap a result, only use it when it is ok and pass the\n  error up otherwise.\n- `.expect()` can be used to reformat a Result or Optional\n\n- Structs\n\n  - Struct construction is done via `Struct { member_1, member_2 }`.\n  - The class itself can be referenced in methods via `Self` while the instance\n    can be accessed using `self`\n\n- `Iterator` trait objects\n\n  - have a method `step_by` which allows to skip some items.\n  - have a method `filter_map` to do filtering and mapping in one go.\n\n- We can use `|(a, _)| a % 2 == 0` syntax to combine pattern matching and a\n  lambda function.\n\n- `map` can be used on `Option` to run function on the `Some` case\n\n- bools can be converted to an `Option` by using `.then()` or `then_some()`.\n\n- Traits can be combined with `+`.ðŸ¤¯\n- The `std::cmp::Eq` trait and `std::hash::Hash` traits are required for HashMap\n  keys.\n- The `std::cmp::Ord` trait is required for comparing.\n\n- HashMap entries\n\n  - can be set with `.insert()`\n  - can be retrieved with `.get()` or\n  - modified with `.get_mut()`.\n  - can be modified in place with `.entry()`\n\n- `Iter` vs `IntoIterator` traits :\n\n  - `IntoIterator` is required for `for`-loops, but yields values, immutable\n    references or mutable references depending on context.\n  - `Iter` yields immutable references.\n\n- `map().all(|x| x)` can be simplified to `all()`\n\n- `.unwrap_or` can be used on `Option` to easily define a default in the `None`\n  case.\n\n- `vec![0; 5]` can be used to create a vector of five zeroes.\n- `vec![1, 2, 3]` will compile into a vector with elements 1, 2, and 3.\n\n- Don't put a semicolon `;` at the end of lines if the value shall be returned.\n\n- `Vec` elements can be accessed and modified using square brackets `[]`.\n\n- A range can be defined using `1..4`.\n  The last value will not be included.\n","n":0.045}}},{"i":6,"$":{"0":{"v":"Property Based Testing in Rust with Arbitrary","n":0.378},"1":{"v":"\n[property-testing]\n\n- `Arbitrary` trait allows to generate valid objects from random bytes\n- `arbtest` can be used to run tests with `Arbitrary` objects\n\n  - requires a helper function that will get executed multiple times\n\n[property-testing]: https://www.greyblake.com/blog/property-based-testing-in-rust-with-arbitrary/\n","n":0.174}}},{"i":7,"$":{"0":{"v":"Integers","n":1},"1":{"v":"\n\n- Be careful when converting number types of different range, such as `i32`\n  and `u32`.\n\n- `usize` marks the integer size of a memory pointer.\n\n- There are `saturating_` functions for integers that ensure to not exceed their\n  range when adding / subtracting.\n","n":0.156}}},{"i":8,"$":{"0":{"v":"Rust vs C++ Compile Times","n":0.447},"1":{"v":"\n[article]\n\n[article]: https://quick-lint-js.com/blog/cpp-vs-rust-build-times/\n","n":0.707}}},{"i":9,"$":{"0":{"v":"Python","n":1},"1":{"v":"\n\n- [pydeps Â· PyPI](https://pypi.org/project/pydeps/)\n","n":0.5}}},{"i":10,"$":{"0":{"v":"Package Managers","n":0.707},"1":{"v":"\n\n[article]\n\n[article]: https://ealizadeh.com/blog/guide-to-python-env-pkg-dependency-using-conda-poetry\n","n":0.707}}},{"i":11,"$":{"0":{"v":"Why you should use `python -m pip`","n":0.378},"1":{"v":"\n\n[article]\n\n[article]: https://snarky.ca/why-you-should-use-python-m-pip/\n","n":0.707}}},{"i":12,"$":{"0":{"v":"TDD - Where Did It All Go Wrong?","n":0.354},"1":{"v":"\n\n[Link to the video][youtube]\n\n[youtube]: https://www.youtube.com/watch?v=EZ05e7EMOLM\n\n### Motivation\n\n- Staying for longer than 2 years makes it possible to learn from mistakes that\n  you would otherwise not have noticed.\n- Having much more test code than implementation seems a bit weird.\n- Tests with many mocks tend to break when refactoring, which seems wrong.\n  Changing the implementation details should not require the tests to change.\n- \"Programmer Anarchy\" is about developing products with only developers.\n- Tests whose intent is unclear should be a warning sign. For example tests that\n  only test mocks and no acutal code.\n- Large Acceptance Tests are often red for a significant amount of time, without\n  the devs knowing if they are broken, due to unimplemented features or due to\n  bugs.\n  => Developers started ignoring them and did not want to write them.\n  This not changing even after a long time, is also a warning sign.\n\n### What did go wrong?\n\n- \"Test-Driven Development\" by Kent Beck seems alright, maybe we overloaded the\n  concept with other, less helpful concepts.\n  It already has answers for many issues we face with TDD today.\n  For examples:\n  > Avoid testing implementation details, test behaviors\n- => Focus on testing the public API, i.e.\n  - the \"exports\" from a module\n- > The system under test is not a class\n  - The SUT is the \"exports\" from a module\n  - The old \"unit\" means a module, not a \"class\"\n  - Refactoring is a key step to distinguish stuff implementation details and\n    stable interfaces, \"behaviors\"\n- Definition of unit is how the product can be separated so it can be tested in\n  parallel.\n  - Accessing the file system or a database is bad because it makes the tests\n    less independent, and it improves speed.\n    If both are no issue, it is okay to access external systems during testing.\n","n":0.058}}},{"i":13,"$":{"0":{"v":"Modern Software Engineering","n":0.577},"1":{"v":"\nIn the book, David tries to figure out concepts that prooved successful in the last\ndecades of Software Development and thus could help to move our business from\na craft to a serious engineering discipline.\nHe sorts those concepts by two main goals \"Optimize for Learning\" and\n\"Optimize for Managing Complexity\".\nThe resulting groups, which are also the chapters of the main part of the book are:\n\n- for Learning:\n  - Working Iteratively\n  - Feedback\n  - Incrementalism\n  - Empiricism\n  - Being Experimental\n- for Managing Complexity:\n  - Modularity\n  - Cohesion\n  - Separation of Concerns\n  - Information Hiding and Abstraction\n  - Managing Coupling\n\nWhile none of those concepts are new, it is the first time I saw them put into\ncontext like this and also backed up with good arguments as well as some data.\n\nThe book then ends with giving some tools to improve the above concepts:\n\n- Test-Driven Development\n- Ensuring Deployability\n- and Speed: He recommends a maximum of five minutes from commit to test results\n  and one hour from commit to deployment.\n\nEven though the read was a bit repetitive since there is some overlap between\nthe different topics, I found it very inspiring and motivating to try out the\npresented ideas.\n","n":0.073}}},{"i":14,"$":{"0":{"v":"DORA metrics","n":0.707},"1":{"v":"\n- Deployment frequency\n- Lead Time for Changes\n- Mean Time to Recovery\n- Change Failure Rate\n","n":0.267}}},{"i":15,"$":{"0":{"v":"CI/CD","n":1},"1":{"v":"\n- [Ship, Show, Ask - a modern branching strategy](https://martinfowler.com/articles/ship-show-ask.html)\n- [Continuous Integration in Automotive](https://ieeexplore.ieee.org/document/8573886) (Paywall)\n","n":0.267}}},{"i":16,"$":{"0":{"v":"Architecture","n":1},"1":{"v":"\n- [Structurizr](https://structurizr.org/)\n- [C4 Model Tooling](https://c4model.com/#Tooling)\n- [Structurizr](https://structurizr.org/)\n","n":0.408}}},{"i":17,"$":{"0":{"v":"Why Architecture Comes before Coding","n":0.447},"1":{"v":"\n\n[GOTO 2021 â€¢ Why Architectural Work Comes Before Coding â€¢ Simon Brown & Stefan Tilkov](https://www.youtube.com/watch?v=TE4rKZ7M1aM)\n","n":0.258}}},{"i":18,"$":{"0":{"v":"Software Architecture vs. Code","n":0.5},"1":{"v":"\n[GOTO 2014 â€¢ Software Architecture vs. Code â€¢ Simon Brown](https://www.youtube.com/watch?v=GAFZcYlO5S0)\n","n":0.316}}},{"i":19,"$":{"0":{"v":"Clean Architecture","n":0.707},"1":{"v":"\n\nby Bob Martin\nhttps://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html\n\n- [A quick introduction to clean architecture](https://www.freecodecamp.org/news/a-quick-introduction-to-clean-architecture-990c014448d2/)\n\n- [Hexagonal Architecture](https://medium.com/ssense-tech/hexagonal-architecture-there-are-always-two-sides-to-every-story-bc0780ed7d9c)\n","n":0.302}}},{"i":20,"$":{"0":{"v":"How do you structure your Go Apps","n":0.378},"1":{"v":"\n- Speaker: Kat Zien\n- https://www.youtube.com/watch?v=oL6JBUk6tj0\n\n- \"Hexagonal\" vs MVC levels\n  - Have a pkg directory for binaries\n  - similar to onion / clean architecture\n","n":0.209}}},{"i":21,"$":{"0":{"v":"arc42","n":1},"1":{"v":"\n[arc42 - arc42](https://arc42.org/)\n","n":0.577}}}]}
