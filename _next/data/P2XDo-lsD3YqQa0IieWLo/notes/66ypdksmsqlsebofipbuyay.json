{"pageProps":{"note":{"id":"66ypdksmsqlsebofipbuyay","title":"Rust","desc":"","updated":1672323752501,"created":1668609691418,"custom":{},"fname":"languages.rust","type":"note","vault":{"fsPath":".","selfContained":true,"name":"software-dev-ressources"},"contentHash":"e475723013424e6913746faf15e37062","links":[],"anchors":{},"children":["50pogelp1rmf716yk8ldncz","2z9akjjnly8kksdwnfc4scp","ng82ko3qadg1h1w4yo6tt7q"],"parent":"kc36haops8nyqjb9tq3fe82","data":{}},"body":"<h1 id=\"rust\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rust\"></a>Rust</h1>\n<ul>\n<li>\n<p><code>to_owned</code>: goes from borrowed to owned, usually by implementing the clone\ntrait.</p>\n</li>\n<li>\n<p>The difference between arrays and slices is that arrays have a fixed size\nand are denoted with <code>[T, n]</code> or <code>&#x26;[T, n]</code> while slices have a variable\nsize and are denoted with <code>[T]</code> or <code>&#x26;[T]</code>.</p>\n</li>\n<li>\n<p>Slices</p>\n<ul>\n<li>\n<p>have a <code>.windows(n)</code> method that returns all possible windows of length\n<code>n</code> for that slice.</p>\n</li>\n<li>\n<p>have a <code>.any(predicate) bool</code> method that returns true if any of the\ncontained ites evaluates true under the predicate.</p>\n</li>\n<li>\n<p>have a <code>.len()</code> and a <code>.is_empty()</code> method.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>Lambdas can be defined with a <code>|x, y| x*y</code> syntax.</p>\n</li>\n<li>\n<p><code>match</code> can receive mutliple values, like</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">match</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n     <span class=\"token punctuation\">...</span>\n<span class=\"token punctuation\">}</span>`\n</code></pre>\n</li>\n<li>\n<p>We can use <code>||</code> syntax to return a first simple expression and forward to a\nmore complex expression in case the first one is false.</p>\n</li>\n<li>\n<p>The crate <code>int_enum</code> can be used to build integer-valued enums with the syntax</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[repr(usize)]</span>\n<span class=\"token attribute attr-name\">#[derive(Clone, Copy, Debug, PartialEq, Eq, IntEnum)]</span>\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Colors</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Red</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token class-name\">Blue</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> red <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token function\">from_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value out of range\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> int_value <span class=\"token operator\">=</span> red<span class=\"token punctuation\">.</span><span class=\"token function\">int_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n</code></pre>\n</li>\n<li>\n<p>The crate <code>enum_iterator</code> can be used to iterate over enums.</p>\n</li>\n<li>\n<p><code>?</code> can be used to unwrap a result, only use it when it is ok and pass the\nerror up otherwise.</p>\n</li>\n<li>\n<p><code>.expect()</code> can be used to reformat a Result or Optional</p>\n</li>\n<li>\n<p>Structs</p>\n<ul>\n<li>Struct construction is done via <code>Struct { member_1, member_2 }</code>.</li>\n<li>The class itself can be referenced in methods via <code>Self</code> while the instance\ncan be accessed using <code>self</code></li>\n</ul>\n</li>\n<li>\n<p><code>Iterator</code> trait objects</p>\n<ul>\n<li>have a method <code>step_by</code> which allows to skip some items.</li>\n<li>have a method <code>filter_map</code> to do filtering and mapping in one go.</li>\n</ul>\n</li>\n<li>\n<p>We can use <code>|(a, _)| a % 2 == 0</code> syntax to combine pattern matching and a\nlambda function.</p>\n</li>\n<li>\n<p><code>map</code> can be used on <code>Option</code> to run function on the <code>Some</code> case</p>\n</li>\n<li>\n<p>bools can be converted to an <code>Option</code> by using <code>.then()</code> or <code>then_some()</code>.</p>\n</li>\n<li>\n<p>Traits can be combined with <code>+</code>.ðŸ¤¯</p>\n</li>\n<li>\n<p>The <code>std::cmp::Eq</code> trait and <code>std::hash::Hash</code> traits are required for HashMap\nkeys.</p>\n</li>\n<li>\n<p>The <code>std::cmp::Ord</code> trait is required for comparing.</p>\n</li>\n<li>\n<p>HashMap entries</p>\n<ul>\n<li>can be set with <code>.insert()</code></li>\n<li>can be retrieved with <code>.get()</code> or</li>\n<li>modified with <code>.get_mut()</code>.</li>\n<li>can be modified in place with <code>.entry()</code></li>\n</ul>\n</li>\n<li>\n<p><code>Iter</code> vs <code>IntoIterator</code> traits :</p>\n<ul>\n<li><code>IntoIterator</code> is required for <code>for</code>-loops, but yields values, immutable\nreferences or mutable references depending on context.</li>\n<li><code>Iter</code> yields immutable references.</li>\n</ul>\n</li>\n<li>\n<p><code>map().all(|x| x)</code> can be simplified to <code>all()</code></p>\n</li>\n<li>\n<p><code>.unwrap_or</code> can be used on <code>Option</code> to easily define a default in the <code>None</code>\ncase.</p>\n</li>\n<li>\n<p><code>vec![0; 5]</code> can be used to create a vector of five zeroes.</p>\n</li>\n<li>\n<p><code>vec![1, 2, 3]</code> will compile into a vector with elements 1, 2, and 3.</p>\n</li>\n<li>\n<p>Don't put a semicolon <code>;</code> at the end of lines if the value shall be returned.</p>\n</li>\n<li>\n<p><code>Vec</code> elements can be accessed and modified using square brackets <code>[]</code>.</p>\n</li>\n<li>\n<p>A range can be defined using <code>1..4</code>.\nThe last value will not be included.</p>\n</li>\n</ul>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/software-dev-ressources/notes/2z9akjjnly8kksdwnfc4scp\">Integers</a></li>\n<li><a href=\"/software-dev-ressources/notes/ng82ko3qadg1h1w4yo6tt7q\">Property Based Testing in Rust with Arbitrary</a></li>\n<li><a href=\"/software-dev-ressources/notes/50pogelp1rmf716yk8ldncz\">Rust vs C++ Compile Times</a></li>\n</ol>","noteIndex":{"id":"73neeqm706h4yfbgcigd5bv","title":"Software Development Ressources","desc":"","updated":1674162443326,"created":1673459298905,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"software-dev-ressources"},"contentHash":"0667b5935bbde8dd7f0512eccafb0087","links":[],"anchors":{"welcome-to-my-notes-on-software-development":{"type":"header","text":"Welcome to my Notes on Software Development","value":"welcome-to-my-notes-on-software-development","line":8,"column":0,"depth":2}},"children":["zpnqg6bt1wcsuyx2moijqza","yqr48uszqjtjv25z2yp1tda","suojggnw09bw5ak26niqfxx","crs8k3njhxvhu2ei4ftkt7x","zhsasa7my0cp3larm30ghef","kc36haops8nyqjb9tq3fe82","8pgbvyqqbuxr72euz88a4z1"],"parent":null,"data":{},"body":"\n## Welcome to my Notes on Software Development\n\nI am collecting some notes and ressources on different software development topics, sometimes with a summary.\n\nIf you have feedback, [let me know](https://github.com/realJohnDoe/software-dev-ressources/issues/new/choose)!ðŸ™‚\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"software-dev-ressources"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enableHandlebarTemplates":true,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableMermaid":true},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://realJohnDoe.github.io","assetsPrefix":"/software-dev-ressources","enableMermaid":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}